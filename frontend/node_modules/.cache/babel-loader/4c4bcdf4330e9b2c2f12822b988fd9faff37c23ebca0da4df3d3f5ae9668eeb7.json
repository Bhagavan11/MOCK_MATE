{"ast":null,"code":"export function speak(text) {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.lang = 'en-US';\n  speechSynthesis.speak(utterance);\n}\nexport function useSpeechToText(setAnswer) {\n  let recognition;\n  if (window.SpeechRecognition || window.webkitSpeechRecognition) {\n    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = 'en-US';\n    recognition.interimResults = true;\n    recognition.continuous = true;\n  } else {\n    console.error(\"Speech recognition not supported in this browser\");\n  }\n  const startListening = () => {\n    if (!recognition) return;\n    recognition.start();\n  };\n  const stopListening = () => {\n    if (!recognition) return;\n    recognition.stop();\n  };\n  if (recognition) {\n    recognition.onresult = event => {\n      const speechResult = event.results[0][0].transcript;\n      setAnswer(prev => `${prev} ${speechResult}`.trim()); // Append if needed\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error\", event.error);\n    };\n  }\n  return {\n    startListening,\n    stopListening\n  };\n}","map":{"version":3,"names":["speak","text","utterance","SpeechSynthesisUtterance","lang","speechSynthesis","useSpeechToText","setAnswer","recognition","window","SpeechRecognition","webkitSpeechRecognition","interimResults","continuous","console","error","startListening","start","stopListening","stop","onresult","event","speechResult","results","transcript","prev","trim","onerror"],"sources":["C:/Users/BHAGAVAN/OneDrive/Desktop/Mock-Intrview/frontend/src/lib/speak.js"],"sourcesContent":["export function speak(text) {\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n  utterance.lang = 'en-US';\r\n  speechSynthesis.speak(utterance);\r\n}\r\n\r\nexport function useSpeechToText(setAnswer) {\r\n  let recognition;\r\n\r\n  if (window.SpeechRecognition || window.webkitSpeechRecognition) {\r\n    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = true;\r\n    recognition.continuous = true;\r\n  } else {\r\n    console.error(\"Speech recognition not supported in this browser\");\r\n  }\r\n\r\n  const startListening = () => {\r\n    if (!recognition) return;\r\n    recognition.start();\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (!recognition) return;\r\n    recognition.stop();\r\n  };\r\n\r\n  if (recognition) {\r\n    recognition.onresult = (event) => {\r\n      const speechResult = event.results[0][0].transcript;\r\n      setAnswer(prev => `${prev} ${speechResult}`.trim()); // Append if needed\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error\", event.error);\r\n    };\r\n  }\r\n\r\n  return { startListening, stopListening };\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,KAAKA,CAACC,IAAI,EAAE;EAC1B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;EACpDC,SAAS,CAACE,IAAI,GAAG,OAAO;EACxBC,eAAe,CAACL,KAAK,CAACE,SAAS,CAAC;AAClC;AAEA,OAAO,SAASI,eAAeA,CAACC,SAAS,EAAE;EACzC,IAAIC,WAAW;EAEf,IAAIC,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB,EAAE;IAC9DH,WAAW,GAAG,KAAKC,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB,EAAE,CAAC;IAChFH,WAAW,CAACJ,IAAI,GAAG,OAAO;IAC1BI,WAAW,CAACI,cAAc,GAAG,IAAI;IACjCJ,WAAW,CAACK,UAAU,GAAG,IAAI;EAC/B,CAAC,MAAM;IACLC,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;EACnE;EAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACR,WAAW,EAAE;IAClBA,WAAW,CAACS,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACV,WAAW,EAAE;IAClBA,WAAW,CAACW,IAAI,CAAC,CAAC;EACpB,CAAC;EAED,IAAIX,WAAW,EAAE;IACfA,WAAW,CAACY,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;MACnDjB,SAAS,CAACkB,IAAI,IAAI,GAAGA,IAAI,IAAIH,YAAY,EAAE,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAEDlB,WAAW,CAACmB,OAAO,GAAIN,KAAK,IAAK;MAC/BP,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEM,KAAK,CAACN,KAAK,CAAC;IACxD,CAAC;EACH;EAEA,OAAO;IAAEC,cAAc;IAAEE;EAAc,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}