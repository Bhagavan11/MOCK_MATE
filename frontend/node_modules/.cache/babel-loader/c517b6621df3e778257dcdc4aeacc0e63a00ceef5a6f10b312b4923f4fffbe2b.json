{"ast":null,"code":"// ✅ src/store/useInterviewStore.js\n\nimport { create } from \"zustand\";\nimport toast from \"react-hot-toast\";\nimport { axiosInstance } from \".\";\nexport const useInterviewStore = create((set, get) => ({\n  parsedResume: \"\",\n  questions: [],\n  answers: [],\n  evaluation: \"\",\n  currentIndex: 0,\n  loading: \"\",\n  uploadResume: async file => {\n    if (!file) {\n      toast.error(\"Please select a file!\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"resume\", file);\n    try {\n      set({\n        loading: \"Uploading resume...\"\n      });\n      const res = await axiosInstance.post(\"/api/interviews/uploadResume\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      set({\n        parsedResume: res.data.parsedResume\n      });\n      toast.success(\"Resume uploaded!\");\n\n      // Auto get questions\n      set({\n        loading: \"Generating questions...\"\n      });\n      const qres = await axiosInstance.get(\"/api/interviews/getQuestions\");\n      set({\n        questions: qres.data.questions\n      });\n      toast.success(\"Questions generated!\");\n      set({\n        loading: \"\"\n      });\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Failed to upload or get questions\");\n      set({\n        loading: \"\"\n      });\n    }\n  },\n  addAnswer: answer => set(state => ({\n    answers: [...state.answers, answer]\n  })),\n  nextQuestion: () => set(state => ({\n    currentIndex: state.currentIndex + 1\n  })),\n  submitAnswers: async () => {\n    const {\n      answers\n    } = get();\n    try {\n      set({\n        loading: \"Evaluating answers...\"\n      });\n      const res = await axiosInstance.post(\"/api/interviews/submitAnswers\", {\n        answers\n      });\n      set({\n        evaluation: res.data.evaluation\n      });\n      toast.success(\"Evaluation done!\");\n      set({\n        loading: \"\"\n      });\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Failed to evaluate.\");\n      set({\n        loading: \"\"\n      });\n    }\n  },\n  reset: () => set({\n    parsedResume: \"\",\n    questions: [],\n    answers: [],\n    evaluation: \"\",\n    currentIndex: 0,\n    loading: \"\"\n  })\n}));","map":{"version":3,"names":["create","toast","axiosInstance","useInterviewStore","set","get","parsedResume","questions","answers","evaluation","currentIndex","loading","uploadResume","file","error","formData","FormData","append","res","post","headers","data","success","qres","err","console","addAnswer","answer","state","nextQuestion","submitAnswers","reset"],"sources":["C:/Users/BHAGAVAN/OneDrive/Desktop/Mock-Intrview/frontend/src/store.js"],"sourcesContent":["// ✅ src/store/useInterviewStore.js\r\n\r\nimport { create } from \"zustand\";\r\nimport toast from \"react-hot-toast\";\r\nimport { axiosInstance } from \".\";\r\n\r\nexport const useInterviewStore = create((set, get) => ({\r\n  parsedResume: \"\",\r\n  questions: [],\r\n  answers: [],\r\n  evaluation: \"\",\r\n  currentIndex: 0,\r\n  loading: \"\",\r\n\r\n  uploadResume: async (file) => {\r\n    if (!file) {\r\n      toast.error(\"Please select a file!\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"resume\", file);\r\n\r\n    try {\r\n      set({ loading: \"Uploading resume...\" });\r\n      const res = await axiosInstance.post(\r\n        \"/api/interviews/uploadResume\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n\r\n      set({ parsedResume: res.data.parsedResume });\r\n      toast.success(\"Resume uploaded!\");\r\n\r\n      // Auto get questions\r\n      set({ loading: \"Generating questions...\" });\r\n      const qres = await axiosInstance.get(\"/api/interviews/getQuestions\");\r\n      set({ questions: qres.data.questions });\r\n      toast.success(\"Questions generated!\");\r\n      set({ loading: \"\" });\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"Failed to upload or get questions\");\r\n      set({ loading: \"\" });\r\n    }\r\n  },\r\n\r\n  addAnswer: (answer) =>\r\n    set((state) => ({\r\n      answers: [...state.answers, answer],\r\n    })),\r\n\r\n  nextQuestion: () =>\r\n    set((state) => ({\r\n      currentIndex: state.currentIndex + 1,\r\n    })),\r\n\r\n  submitAnswers: async () => {\r\n    const { answers } = get();\r\n    try {\r\n      set({ loading: \"Evaluating answers...\" });\r\n      const res = await axiosInstance.post(\"/api/interviews/submitAnswers\", {\r\n        answers,\r\n      });\r\n      set({ evaluation: res.data.evaluation });\r\n      toast.success(\"Evaluation done!\");\r\n      set({ loading: \"\" });\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"Failed to evaluate.\");\r\n      set({ loading: \"\" });\r\n    }\r\n  },\r\n\r\n  reset: () =>\r\n    set({\r\n      parsedResume: \"\",\r\n      questions: [],\r\n      answers: [],\r\n      evaluation: \"\",\r\n      currentIndex: 0,\r\n      loading: \"\",\r\n    }),\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}